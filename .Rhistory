y=-Inf),label=dats)+coord_cartesian(clip = "off") +
theme(plot.margin = margin(4, 4, 30, 4, unit = "pt"))
pdf('nmrse-arraylike.pdf',width=6,height=4)
p1
dev.off()
p1=ggplot()+
geom_boxplot(data = df,mapping = aes_string(x = 'dasig',y='Cosine',fill='r2m'),
outlier.colour = NA,position = position_dodge(1))+
scale_x_discrete(limits=c(levs[1:2],'',levs[3:4],'',levs[5:6],'',levs[7:8]),
breaks=levs,labels=rep(sigs,times=length(dats)),expand = c(0,1))+
theme(panel.background = element_rect(fill = 'white',colour = 'black'),
plot.background = element_blank(),
panel.grid = element_blank(),
axis.text.x = element_text(angle = 90,hjust=1,vjust = 0.5))+
labs(x=NULL,y='Cosine',fill=NULL)+
scale_fill_manual(labels=c('Not Arraylike','Arraylike'),breaks = c('FALSE','TRUE'),
values = c('white','deepskyblue1'))+
geom_vline(xintercept = seq(3,by=3,length.out = length(dats)-1),
linetype='dotted',col='gray')+
geom_text(mapping =aes(x,y,label=label), vjust = 10,
data=data.frame(x=seq(1.5,by=3,length.out = length(dats)),
y=-Inf),label=dats)+coord_cartesian(clip = "off") +
theme(plot.margin = margin(4, 4, 30, 4, unit = "pt"))
pdf('cosine-arraylike.pdf',width=6,height=4)
p1
dev.off()
cd('..')
# 4) blood or tissue
cd('7. bloodOrTissue')
df=df.temp
df=df[df$r2m != 'TRUE',]
df$dbt=rm$BT[match(df$Dataset,rm$name)]
df$sigbt=rm$BT[match(df$Signature,rm$name)]
df$bt.type = paste0('D',df$dbt,'S',df$sigbt)
my.boxplot(df,'bt.type','Cor','Cor_boxplot_1.pdf','')
my.boxplot(df,'bt.type','NRMSE','NRMSE_boxplot_1.pdf','')
my.boxplot(df,'bt.type','Cosine','Cosine_boxplot_1.pdf','')
cd('..')
# use arraylike data or not? ----------------------------------------------
# use.al=F
# df=df.original
# if(use.al){
#   df$uni=paste0(df$Dataset,df$Method,df$basis,df$Markerlist,df$Signature)
#   r2m.uni=df$uni[df$r2m=='TRUE']
#   df=df[!(df$uni %in% r2m.uni & df$r2m !='TRUE'),]
#   df.use=df
# }else{
#   df.use=df[df$r2m=='FALSE',]
# }
# only use gse11058_sig arraylike
df=df.original
df$uni=paste0(df$Dataset,df$Method,df$basis,df$Markerlist,df$Signature)
r2m.uni=df$uni[df$r2m=='TRUE']
df=df[!(df$uni %in% r2m.uni & df$r2m =='TRUE' & df$Signature == 'LM22'),]
df=df[!(df$uni %in% r2m.uni & df$r2m !='TRUE' & df$Signature == 'GSE11058_sig'),]
df.use=df
# Phase I : hist.seg ------------------------------------------------------
cd('2. hist.seg_phase1')
# 1) some hist.seg-ploting-relating function
hist.seg=function(df.all,d,by,minus='gray',posi='orange',cex0=1,
marker='dodgerblue4',sig='indianred2',file=NULL){
if(!is.null(file)) pdf(file = file,width = 6,height = 6)
df.all=df.all[!is.na(df.all[,by]),]
df.all.d=df.all[df.all$Dataset==d,]
dcor=df.all.d$Cor
dcor=dcor[!is.na(dcor)]
dpv=df.all.d$corPv
dpv=dpv[!is.na(dpv)]
pct1=sum(dcor>0)/length(dcor)
pct2=sum(dpv<0.05)/length(dpv)
#par(mfrow=c(2,1))
layout(matrix(c(1,2), ncol = 1),heights = c(0.6,0.4))
mar.ori=par('mar')
mar=mar.ori
mar[2]=7
mar[4]=0
par(mar=mar)
my.hist(dcor,main=paste0(d),pct1=pct1,pct2=pct2,
col.m = minus,col.p = posi,cex0 = cex0)
mar.ori1=par('mar')
mar=mar.ori1
mar[3]=0
mar[1]=0
par(mar=mar)
by.ls=cor.ls(df.all.d,by)
nty=length(by.ls)
par(xpd=NA)
plot(x=c(-1.1,1),y=c(0,nty+1),type='n',ann=F,axes=F)
mar.met=c("DSA","ssKL","ssFrobenius","meanProfile","xCell","MCPcounter")
text(x=-1,y=nty+1,labels = paste0(by,' (median)'),cex=1.2*cex0,adj=0.9)
for(i in 1:nty){
name=names(by.ls)[i]
cor0=by.ls[[i]]
m0=median(cor0,na.rm = T)
if(name %in% mar.met) col=marker else col=sig
if(by!='Method') col='black'
y=nty+1-i
dcor.min=min(dcor)
x0=min(dcor.min,-1+0.2)
text(x=-1,y=y,labels=paste0(name,' (',round(m0,2),')'),
col = col,pos=2,cex=cex0)
col=ifelse(cor0<0,'gray18',posi)
segments(x0 = cor0,y0=y+0.4,x1 = cor0,y1=y-0.4,col=col,lwd=1.4)
}
if(by=='Method'){
points(y=c(0,0),x=c(-1.5,-0.5),col=c(marker,sig),pch=16,cex=2)
text(y=c(0,0),x=c(-1.5,-0.5),
labels = c('Marker-guided algorithms','SignatureMat-guided algorithms'),
pos=4,cex=cex0)
}
par(mar=mar.ori)
if(!is.null(file)) dev.off()
}
pp=function(x1,x2,p) p*x1+(1-p)*x2
my.hist=function(x,num=100,main,pct1,pct2,col.m,col.p,cex0=1){
par(xpd=F)
m=median(x,na.rm = T)
hist(x,breaks = seq(from=-1,to=1,by=2/num),
xlim = c(-1.1,1),
col=rep(c(col.m,col.p),each=num/2),
freq = F,xlab = 'Pearson correlation',
ylab = 'Probability density',main=main,mgp=c(2.5,1,0),cex.lab=1.2*cex0)
abline(v=m,lty=2,lwd=2)
usr=par('usr')
y1=usr[3]
y2=usr[4]
strwid=strwidth('10.0% significant positive correlation')
x.m=max(m,-1.2+strwid+0.05)
if(x.m>0.6) pos=2 else pos=4
text(paste0('Median = ',round(m,2)),x=x.m,y=pp(y1,y2,0.4),pos=pos,cex=cex0*0.95)
text(x = -1.05,y=pp(y1,y2,0.2),paste0(round(pct1,3)*100,'% positive correlation\n\n',
round(pct2,3)*100,'% significant positive correlation\n',
'(p value < 0.05)'),
pos=4,adj=c(0,0),cex=cex0*0.95,xpd=T)
return('Good Job!')
}
cor.ls=function(df,by){
cor=df[,'Cor']
by.item=factor(df[,by],levels = unique(df[,by][order(df$basis)]))
ls0=split(cor,by.item)
return(ls0)
}
# 2) ploting
bys=c('Method','Markerlist','Signature')
#d=ds[1]
#b=bys[1]
#hist.seg(df.all,d,by=b)
df.all=df.use
for(d in ds){
for (b in bys){
#png(paste0(d,'_',b,'.png'),width = 1300,height = 1200,res=150)
file=paste0(d,'_',b,'.pdf')
hist.seg(df.all,d,by=b,cex0=0.9,file = file)
#dev.off()
}
}
cd('..')
# phase I signature vs makerlist boxplot --------------------------------
cd('8. SignatureOrMarkerList_boxplot')
df=df.use
my.boxplot(df,'basis','Cosine','Cosine_boxplot_phase1.pdf','')
my.boxplot(df,'basis','Cor','Cor_boxplot_phase1.pdf','')
my.boxplot(df,'basis','NRMSE','NRMSE_boxplot_phase1.pdf','')
cd('..')
# Phase I: rank -----------------------------------------------------------
cd('3. meanrank_phase1')
library(ggplot2)
library(gridExtra)
df.ne=df.use
cb=unique(df.ne$mms)
bs=c('Cor','Cosine','NRMSE','LRMSE')
# b='Cor' # b means based statistics
for(b in bs){
dec_bs=c('Cor','Cosine')
dec=(b %in% dec_bs) # decrease or not
rank1=sapply(cb, function(x){
sapply(ds, function(i){
if (!x %in% df.ne[df.ne$Dataset==i,"mms"]) NA else{
which(df.ne[df.ne$Dataset==i,"mms"][order(df.ne[df.ne$Dataset==i,b],decreasing = dec)]==x)
}
})
})
normalize.rank=apply(rank1, 1, function(x){
x*ncol(rank1)/max(x,na.rm = T)
})
average.normalize.rank=apply(normalize.rank,1,mean,na.rm=T)
df.rank=data.frame(combination=names(average.normalize.rank),
aver_rank=average.normalize.rank,
basis=sapply(names(average.normalize.rank), function(x){
df.ne$basis[df.ne$mms==x][1]
}))
y.lab=paste0(b,"_average_rank")
p1=ggplot(data=df.rank,
mapping=aes(factor(combination,levels = combination[order(aver_rank)]),
aver_rank,fill=basis))+
xlab('')+
ylab(y.lab)+
theme(axis.text.x = element_text(angle = 90, hjust = 1,vjust = 0.5))+
geom_col(position = 'dodge')
p2=ggplot(data=df.rank,
mapping=
aes(factor(combination,levels = combination[order(aver_rank)]),aver_rank,fill=basis))+
geom_line(aes(group=1))+
geom_point(aes(colour=basis))+
xlab('')+
ylab(y.lab)+
theme(axis.text.x = element_text(angle = 90, hjust = 1,vjust = 0.5))
filename=paste0(b,'_phaseI_averageRank.png')
png(filename = filename,height = 1200,width = 1200)
grid.arrange(grobs=list(p1,p2),layout_matrix=matrix(1:2,nrow=2))
dev.off()
}
cd("..")
# filter phase-I to phase-II ----------------------------------------------
cd('4. filter')
df=df.use
threshold=0.5 # the minimum of percentage of p-value less than 0.05
minnum=10 # the minimum number of assessments relating to each sig/mar allowed
df$bName=ifelse(df$basis=='marker',yes=df$Markerlist,no=df$Signature)
mks=unique(df[df$basis=='marker',]$bName)
bname=unique(df$bName)
mat.fil=sapply(bname,function(b){
pvb=df$corPv[df$bName==b] #p value of b
n.all=length(pvb)
n.sign=sum(pvb<0.05) # the number of significant p-values
perc=n.sign/n.all # percentage
c(n.all,n.sign,perc)
})
mat.fil=t(mat.fil)
colnames(mat.fil)=c('numOfAssessments','numOfSignificantPvalue','percentage')
method=unique(df$Method)
mat.fil.method=sapply(method,function(b){
pvb=df$corPv[df$Method==b] #p value of b
n.all=length(pvb)
n.sign=sum(pvb<0.05) # the number of significant p-values
perc=n.sign/n.all # percentage
c(n.all,n.sign,perc)
})
mat.fil.method=t(mat.fil.method)
colnames(mat.fil.method)=c('numOfAssessments','numOfSignificantPvalue','percentage')
# celltypes should include at least 3, Tirosh doesnot meet this criterior
ct.notinclude=c('Tirosh')
df.filter=data.frame(name=rownames(mat.fil),
type=ifelse(bname %in% mks,'markerlist','signature'),
mat.fil,thresholdOfPer=threshold,
minNumAllowed=minnum,
includedInPhaseII=(mat.fil[,1]>minnum)&(mat.fil[,3]>threshold)&
(!rownames(mat.fil)%in%ct.notinclude))
df.filter.method=data.frame(name=rownames(mat.fil.method),
type='method',
mat.fil.method,thresholdOfPer=threshold,
minNumAllowed=minnum,
includedInPhaseII=(mat.fil.method[,1]>minnum)&(mat.fil.method[,3]>threshold))
df.filter=rbind(df.filter,df.filter.method)
write.table(df.filter,'filterRes.txt',sep='\t',quote = F,row.names = F,col.names = T)
sig2=df.filter$name[df.filter$type=='signature'&df.filter$includedInPhaseII]
mar2=df.filter$name[df.filter$type=='markerlist'&df.filter$includedInPhaseII]
met2=df.filter$name[df.filter$type=='method'&df.filter$includedInPhaseII]
cat('\nthe included signatures:',sig2)
cat('\nthe included markerlists:',mar2,'\n')
cat('\nthe included methods:',met2,'\n')
df.pha2=df[df$bName %in% c(sig2,mar2)&(df$Method %in% met2),]
cd('..')
# 2) microarray or rnaseq. and arraylike dataset
cd('1. rnaseqOrMA')
df=df.original
df.all=df[df$Level=='All',]
df=df.all[df.all$Dataset %in% rm$name&df.all$Signature %in% sig2,]
drm=rm$RM[match(df$Dataset,rm$name)]
sigrm=rm$RM[match(df$Signature,rm$name)]
df=data.frame(drm=drm,sigrm=sigrm,df)
df$type=paste0('D',substr(df$drm,1,1),'S',substr(df$sigrm,1,1))
df$type[df$r2m=='TRUE']=paste0(df$type[df$r2m=='TRUE'],'-toAL')
table(df$type)
my.boxplot(df,'type','Cor','Cor_boxplot_2.pdf','')
my.boxplot(df,'type','NRMSE','NRMSE_boxplot_2.pdf','')
my.boxplot(df,'type','Cosine','Cosine_boxplot_2.pdf','')
cd('..')
# Phase II : hist.seg -----------------------------------------------------
cd('5. hist.seg_phase2')
bys=c('Method','Markerlist','Signature')
df.all=df.pha2
for(d in ds){
for (b in bys){
#png(paste0(d,'_',b,'.png'),width = 1300,height = 1200,res=150)
file=paste0(d,'_',b,'.png')
hist.seg(df.all,d,by=b,file = file,cex0 = 0.9)
#dev.off()
}
}
cd('..')
# 2) blood or tissue in Phase II
cd('7. bloodOrTissue')
df.all=df.pha2
df=df.all[df.all$Dataset %in% rm$name&df.all$Signature %in% rm$name,]
df$dbt=rm$BT[match(df$Dataset,rm$name)]
df$sigbt=rm$BT[match(df$Signature,rm$name)]
df$bt.type = paste0('D',df$dbt,'S',df$sigbt)
my.boxplot(df,'bt.type','Cor','Cor_boxplot_2.pdf','')
my.boxplot(df,'bt.type','NRMSE','NRMSE_boxplot_2.pdf','')
my.boxplot(df,'bt.type','Cosine','Cosine_boxplot_2.pdf','')
cd('..')
# phase II signature vs makerlist boxplot --------------------------------
cd('8. SignatureOrMarkerList_boxplot')
df=df.pha2
my.boxplot(df,'basis','Cosine','Cosine_boxplot_phase2.pdf','')
my.boxplot(df,'basis','Cor','Cor_boxplot_phase2.pdf','')
my.boxplot(df,'basis','NRMSE','NRMSE_boxplot_phase2.pdf','')
cd('..')
# Phase II : rank ---------------------------------------------------------
# 1) function
averank=function(df,ds,by){
df$mms=paste0(df$Method,'(',ifelse(df$basis=='signature',df$Signature,df$Markerlist),')')
df.ne=df[df$Dataset %in% ds & df$Level=='All',]
print(dim(df.ne))
cb=unique(df.ne$mms)
dec=(by %in% c('Cor','Cosine'))
rank1=sapply(cb, function(x){
sapply(ds, function(i){
if (!x %in% df.ne[df.ne$Dataset==i,"mms"]) NA else{
which(df.ne[df.ne$Dataset==i,"mms"][order(df.ne[df.ne$Dataset==i,by],decreasing = dec)]==x)
}
})
})
normalize.rank=apply(rank1, 1, function(x){
x*ncol(rank1)/max(x,na.rm = T)
})
average.normalize.rank=apply(normalize.rank,1,mean,na.rm=T)
df.rank=data.frame(combination=names(average.normalize.rank),
aver_rank=average.normalize.rank,
basis=sapply(names(average.normalize.rank), function(x){
df.ne$basis[df.ne$mms==x][1]
}))
main=paste0(ds,collapse = '_')
##write df.rank table
df.rank0=df.rank[order(df.rank$aver_rank),]
df.rank0=data.frame(No=seq(nrow(df.rank0)),df.rank0)
write.table(df.rank0,paste0(by,'_',main,'.txt'),sep ='\t',quote = F,row.names = F)
cols=c('marker'='dodgerblue4','signature'='indianred2')
p1=ggplot(data=df.rank,
mapping=aes(factor(combination,levels = combination[order(aver_rank)]),
aver_rank,fill=basis))+
xlab('method(signature/marker)')+
ylab(paste0(by,"_average_rank"))+
labs(title = main)+
theme(axis.text.x = element_text(angle = 90, hjust = 1,vjust = 0.5))+
geom_col(position = 'dodge')+
scale_fill_manual(values = cols)
p2=ggplot(data=df.rank,
mapping=
aes(factor(combination,levels = combination[order(aver_rank)]),aver_rank,fill=basis))+
geom_line(aes(group=1))+
geom_point(aes(colour=basis))+
xlab('method(signature/marker)')+
ylab(paste0(by,"_average_rank"))+
labs(title = main)+
theme(axis.text.x = element_text(angle = 90, hjust = 1,vjust = 0.5))+
scale_colour_manual(values = cols)
return(list(p1,p2,df.rank0))
}
# 2) plot and write table +++++
cd('6. rank_phase2')
df.all=df.pha2
# plot or not ?
Plot=T
wtb=F # whether output vote table
ds1=c('GSE11058','GSE60424','GSE72056')
ds2=c('GSE11058','GSE60424','GSE64385','GSE72056','GSE93722')
ds3=c('GSE11058','GSE60424','GSE64385','GSE72056','GSE93722','SDY67')
bys=c('Cor','Cosine','LRMSE','NRMSE')
newdf=T
for(by in bys){
for(ds in list(ds1,ds2,ds3)){
pls=averank(df.all,ds,by)
title=paste0('dataset_',length(ds),'_',by)
if(Plot){
png(filename = paste0(title,'_p1.png'),width = 2400,height =1800,res=300)
print(pls[[1]])
dev.off()
png(filename = paste0(title,'_p2.png'),width = 2400,height =1800,res=300)
print(pls[[2]])
dev.off()
}
df=pls[[3]]
df=df[,c(2,1)]
names(df)=c('combination',paste0('Rank_',title))
if(newdf){
df0=df
newdf=F
}else{
df0=merge(df0,df,by='combination')
}
}
}
m=df0[,-1]
meanrank=apply(m, 1, mean)
df.vote=data.frame(df0,top3=apply(m, 1, function(x) sum(x<=3)),
top5=apply(m, 1, function(x) sum(x<=5)))
df.vote=df.vote[order(meanrank),]
if(wtb) write.table(df.vote,'vote.txt',sep='\t',row.names = F,quote = F)
# final rank ++++++++++++
self=getwd()
config=read.delim(file.path(self,'../../config'))
getData=function(x){
if(x %in% config$Items){
path=file.path(self,config$Path[config$Items==x])
}else{
return(NA)
}
suffix=substr(path,nchar(path)-2,nchar(path))
if(suffix=='txt'){
a=read.delim(path)
return(a)
}else if(suffix=='rda'){
return(path)
}else{
stop('data type is incorrect:', suffix)
}
}
# rank.df=c('cor.d3','cor.d5','cosine.d3','cosine.d5','nrmse.d3','nrmse.d5')
# dfls=lapply(rank.df, function(x){
#   df=getData(x)
# })
# names(dfls)=rank.df
# head(dfls[[1]])
# comb=dfls[[1]]$combination
# mat=sapply(comb, function(co){
#   a=sapply(rank.df,function(rdf){
#     df=dfls[[rdf]]
#     return(df$aver_rank[df$combination==co])
#   })
#   return(a)
# })
# mat=t(mat)
# mean.rank=apply(mat,1,mean)
# score=(mean.rank-51)*(-2)
# mat=cbind(mat,mean.rank,score)
# mat=mat[order(mat[,'mean.rank']),]
# df=data.frame(No=1:nrow(mat),combination=rownames(mat),
#               mat)
# write.table(df,'meanrank_byd3d5.txt',sep = '\t',quote = F,row.names = F)
# ranK by d3 and d6
rank.df=c('cor.d3','cor.d6','cosine.d3','cosine.d6','nrmse.d6','nrmse.d6')
dfls=lapply(rank.df, function(x){
df=getData(x)
})
names(dfls)=rank.df
head(dfls[[1]])
comb=dfls[[1]]$combination
mat=sapply(comb, function(co){
a=sapply(rank.df,function(rdf){
df=dfls[[rdf]]
return(df$aver_rank[df$combination==co])
})
return(a)
})
mat=t(mat)
mean.rank=apply(mat,1,mean)
score=(mean.rank-51)*(-2)
mat=cbind(mat,mean.rank,score)
mat=mat[order(mat[,'mean.rank']),]
df=data.frame(No=1:nrow(mat),combination=rownames(mat),
mat)
write.table(df,'meanrank_byd3d6.txt',sep = '\t',quote = F,row.names = F)
# draw a barplot based on performance score
df$basis=df.ne$basis[match(df$combination,df.ne$mms)]
cols=c('marker'='dodgerblue4','signature'='indianred2')
p=ggplot(data=df,mapping=aes(factor(combination,levels = df$combination[order(df$score,decreasing = T)]),score,fill=basis))+
xlab('method(signature/marker)')+
ylab('Performance Score')+
labs(title = '')+
theme(axis.text.x = element_text(angle = 90, hjust = 1,vjust = 0.5))+
geom_col(position = 'dodge')+
scale_fill_manual(values = cols)
png(filename ='PerformanceScoreBarplot.png',width = 2400,height =1800,res=300)
print(p)
dev.off()
cd('..')
# phase II: boxplot d3/d6 different sig/mar vs cor/cosine/nrmse -----------
cd('9. phase2_sigOrMar_d3d6_boxplot')
df=df.pha2
ds1=c('GSE11058','GSE60424','GSE72056')
ds2=c('GSE11058','GSE60424','GSE64385','GSE72056','GSE93722')
ds3=c('GSE11058','GSE60424','GSE64385','GSE72056','GSE93722','SDY67')
dsls=list(ds1,ds3)
by=c('Cor','Cosine','NRMSE')
for(ds in dsls){
df.sig=df[df$basis=='signature' & df$Dataset %in% ds, ]
df.mar=df[df$basis=='marker' & df$Dataset %in% ds, ]
for (b in by){
my.boxplot(df.mar,'Markerlist',b,paste0(b,'_d',length(ds),'_Mar_phase2.pdf'),
paste0(b,'_Makerlist_d',length(ds),'_phase2'))
my.boxplot(df.sig,'Signature',b,paste0(b,'_d',length(ds),'_Sig_phase2.pdf'),
paste0(b,'_Signature_d',length(ds),'_phase2'))
}
}
cd('..')
library('CTdeconv')
library(EPIC)
example("EPIC")
library(CTdeconv)
example("CTdeconv")
remove('CTdeconv')
remove.packages(CTdeconv)
remove.packages('CTdeconv')
devtools::document()
devtools::document()
devtools::document()
?CTdeconv
# You need to provide path to CIBERSORT.R
path='D:/Users/xiergo/Documents/CIBERSORT.R'
res=CTdeconv(mix,cibersortPath=path)
